/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.EjercicioLecturaCSVconFormulario;

import com.mycompany.EjercicioLecturaCSV.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import static java.util.stream.Collectors.toMap;
import java.util.stream.Stream;

/**
 *
 * @author DAW
 */
public class FormularioIntervenciones extends javax.swing.JFrame {

    /**
     * Creates new form FormularioIntervenciones
     */
    private ArrayList<Intervencion>intervenciones;
    
    public FormularioIntervenciones() {
        this.intervenciones=LeerFichero();
        initComponents();
        String[]incidentes=intervencionConMasYMenosSalidas(intervenciones);
        jTextFieldNombreIncidenteMenor.setText(incidentes[0].toUpperCase());
        jTextFieldNombreIncidenteMayor.setText(incidentes[2].toUpperCase());
        jTextFieldMenosIntervenciones.setText(incidentes[1]);
        jTextFieldMasIntervenciones.setText(incidentes[3]);
        ArrayList<Intervencion>intervencionesPorMes=calcularIntervencionesMediasMesAno2(this.intervenciones);
        for(Intervencion intervencion:intervencionesPorMes){
            String contenido=jTextAreaMediaMesAno.getText();
            jTextAreaMediaMesAno.setText(contenido+"\n"+intervencion.getAno()+" "+intervencion.getMes()+": "+(intervencion.getTotal()/22));
        }
        ArrayList<String>distritos=sacarDistritos(intervenciones);
        for (int i = 0; i < distritos.size(); i++) {
            jComboBoxDistritos.addItem(distritos.get(i));
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldMasIntervenciones = new javax.swing.JTextField();
        jLabelMasIntervenciones = new javax.swing.JLabel();
        jLabelMenosIntervenciones = new javax.swing.JLabel();
        jTextFieldMenosIntervenciones = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaMediaMesAno = new javax.swing.JTextArea();
        jLabelMediaMesAno = new javax.swing.JLabel();
        jComboBoxDistritos = new javax.swing.JComboBox<>();
        jTextFieldIncidentesDistrito = new javax.swing.JTextField();
        jTextFieldNombreIncidenteMayor = new javax.swing.JTextField();
        jTextFieldNombreIncidenteMenor = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextFieldMasIntervenciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldMasIntervencionesActionPerformed(evt);
            }
        });

        jLabelMasIntervenciones.setText("Incidente con mas intervenciones");

        jLabelMenosIntervenciones.setText("Incidente con menos intervenciones");

        jTextFieldMenosIntervenciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldMenosIntervencionesActionPerformed(evt);
            }
        });

        jTextAreaMediaMesAno.setColumns(20);
        jTextAreaMediaMesAno.setRows(5);
        jScrollPane1.setViewportView(jTextAreaMediaMesAno);

        jLabelMediaMesAno.setText("Media por mes y a√±o");

        jComboBoxDistritos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDistritosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBoxDistritos, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldIncidentesDistrito, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelMediaMesAno)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabelMenosIntervenciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelMasIntervenciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextFieldNombreIncidenteMayor)
                                    .addComponent(jTextFieldNombreIncidenteMenor, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextFieldMasIntervenciones, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                                    .addComponent(jTextFieldMenosIntervenciones)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(37, 37, 37))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMasIntervenciones)
                    .addComponent(jTextFieldMasIntervenciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNombreIncidenteMayor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMenosIntervenciones)
                    .addComponent(jTextFieldMenosIntervenciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNombreIncidenteMenor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabelMediaMesAno)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addComponent(jComboBoxDistritos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldIncidentesDistrito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldMasIntervencionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldMasIntervencionesActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jTextFieldMasIntervencionesActionPerformed

    private void jTextFieldMenosIntervencionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldMenosIntervencionesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldMenosIntervencionesActionPerformed

    private void jComboBoxDistritosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDistritosActionPerformed
        // TODO add your handling code here:
        jTextFieldIncidentesDistrito.setText(calcularIntervencionesPorDistrito(intervenciones,jComboBoxDistritos.getSelectedItem().toString()));
    }//GEN-LAST:event_jComboBoxDistritosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormularioIntervenciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormularioIntervenciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormularioIntervenciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormularioIntervenciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
                /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormularioIntervenciones().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBoxDistritos;
    private javax.swing.JLabel jLabelMasIntervenciones;
    private javax.swing.JLabel jLabelMediaMesAno;
    private javax.swing.JLabel jLabelMenosIntervenciones;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaMediaMesAno;
    private javax.swing.JTextField jTextFieldIncidentesDistrito;
    private javax.swing.JTextField jTextFieldMasIntervenciones;
    private javax.swing.JTextField jTextFieldMenosIntervenciones;
    private javax.swing.JTextField jTextFieldNombreIncidenteMayor;
    private javax.swing.JTextField jTextFieldNombreIncidenteMenor;
    // End of variables declaration//GEN-END:variables

    public static ArrayList<Intervencion> LeerFichero(){
        Scanner sc;
        ArrayList<Intervencion>intervenciones=new ArrayList<Intervencion>();
        try{
           String ruta=System.getProperty("user.dir");           
           File ficheroBomberos= new File(ruta+File.separator+"sources"+File.separator+"Bomberos");          
           File[]lista=ficheroBomberos.listFiles();
           for(File archivo:lista){
              File ficheroBomberosPorAno= new File(archivo.getPath());
              if (ficheroBomberosPorAno.exists()){
                sc= new Scanner(ficheroBomberosPorAno);
                sc.useDelimiter(",");
                while(sc.hasNext()){
                  String[]linea=sc.nextLine().split(";");
                  if(linea.length>2){
                    if(!linea[9].equals("SERVICIOS VARIOS")){ 
                      Intervencion intervencion= new Intervencion(linea[0],linea[1],linea[2],linea[3],linea[4],linea[5],
                      linea[6],linea[7],linea[8],linea[9],linea[10]);
                      intervenciones.add(intervencion);
                    }                  
                  } 
                }
                sc.close();
              }
           }            
        }catch(FileNotFoundException f){
            f.getMessage();
        }
        return intervenciones;
    } 
    
    
    public static String[] intervencionConMasYMenosSalidas(ArrayList<Intervencion>intervenciones){
        Map<String, Integer>mapaIncidentes = Stream.of(
         new AbstractMap.SimpleEntry<>("Fuegos", 0),
         new AbstractMap.SimpleEntry<>("Construccion", 0),
         new AbstractMap.SimpleEntry<>("Salvamentos", 0),
         new AbstractMap.SimpleEntry<>("Agua", 0),
         new AbstractMap.SimpleEntry<>("Diversos", 0),
         new AbstractMap.SimpleEntry<>("Salidas sin intervencion", 0),
         new AbstractMap.SimpleEntry<>("Varios", 0))
        .collect(toMap(AbstractMap.SimpleEntry::getKey, AbstractMap.SimpleEntry::getValue));
          
        for(Intervencion intervencion:intervenciones){       
            mapaIncidentes.replace("Fuegos",(mapaIncidentes.get("Fuegos")+intervencion.getFuegos()));
            mapaIncidentes.replace("Construccion",(mapaIncidentes.get("Construccion")+intervencion.getConstruccion()));
            mapaIncidentes.replace("Salvamentos",(mapaIncidentes.get("Salvamentos")+intervencion.getSalvamentos()));
            mapaIncidentes.replace("Agua",(mapaIncidentes.get("Agua")+intervencion.getDanosPorAgua()));
            mapaIncidentes.replace("Diversos",(mapaIncidentes.get("Diversos")+intervencion.getDiversos()));
            mapaIncidentes.replace("Salidas sin intervencion",(mapaIncidentes.get("Salidas sin intervencion")+intervencion.getSalidasSinIntervencion()));
            mapaIncidentes.replace("Varios",(mapaIncidentes.get("Varios")+intervencion.getVarios()));
        }
        List<Map.Entry<String, Integer>> listaIncidentes = new ArrayList<>(mapaIncidentes.entrySet());
        listaIncidentes.sort(Map.Entry.comparingByValue());
        String[]incidentesDevueltos = new String[4];
        incidentesDevueltos[0]=listaIncidentes.get(0).getKey();
        incidentesDevueltos[1]=String.valueOf(listaIncidentes.get(0).getValue());
        incidentesDevueltos[2]=listaIncidentes.get(listaIncidentes.size()-1).getKey();
        incidentesDevueltos[3]=String.valueOf(listaIncidentes.get(listaIncidentes.size()-1).getValue());     
        return incidentesDevueltos;
    }
    
    public static ArrayList<Intervencion> calcularIntervencionesMediasMesAno2(ArrayList<Intervencion>intervenciones){
        Intervencion intervencionBase= new Intervencion();
        ArrayList<Intervencion>intervencionesPorAnoMes= new ArrayList<Intervencion>();
        for(Intervencion intervencion:intervenciones){
            if (intervencionBase.getAno().equals(intervencion.getAno())&& intervencionBase.getMes().equals(intervencion.getMes())) {
                intervencionBase.setTotal(intervencionBase.getTotal()+intervencion.getTotal());
            }else{
               intervencionesPorAnoMes.add(intervencionBase);
               intervencionBase= new Intervencion();
               intervencionBase.setAno(intervencion.getAno());
               intervencionBase.setMes(intervencion.getMes());
               intervencionBase.setTotal(intervencion.getTotal());
            }
        }
        return intervencionesPorAnoMes;
    }
    
    public static ArrayList<String> sacarDistritos(ArrayList<Intervencion>intervenciones){
        ArrayList<String>distritos=new ArrayList<String>();
        for(Intervencion intervencion:intervenciones){
            String nombre=intervencion.getDistrito();
            distritos.add(nombre);
        }
        return distritos;
    }
    
    public static String calcularIntervencionesPorDistrito(ArrayList<Intervencion>intervenciones, String distrito){
        Scanner sc= new Scanner(System.in);
        HashMap<String, Integer>lista= new HashMap<String, Integer>();
        String nombre;
        int totalintervenciones;
        for(Intervencion intervencion:intervenciones){
            nombre=intervencion.getDistrito();
            totalintervenciones=intervencion.getTotal();
            if (lista.containsKey(nombre)) {
                int intervencionesPrevias=lista.get(nombre);
                lista.replace(nombre,(totalintervenciones+intervencionesPrevias));
            }else{
                lista.put(nombre, totalintervenciones);
            }
        }
        return String.valueOf(lista.get(distrito.toUpperCase()));
               
    }

}
